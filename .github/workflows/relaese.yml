name: CI

on: push

jobs:
  build-android:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r26d
    - run: ls -la ${{ steps.setup-ndk.outputs.ndk-path }}
    - run: curl -O https://download.swift.org/swiftly/linux/swiftly-$(uname -m).tar.gz
    - run: tar zxf swiftly-$(uname -m).tar.gz
    - run: ./swiftly init --quiet-shell-followup
    - run: hash -r
    - run: swift --version
    - run: curl -L -O https://github.com/swiftlang/swift/archive/refs/tags/swift-6.1.2-RELEASE.tar.gz
    - run: ls -la
    - run: tar -zxvf swift-6.1.2-RELEASE.tar.gz
    - run: |
        ./swift-6.1.2-RELEASE/utils/build-script \
          -R \  # Build in ReleaseAssert mode.
          --android \  # Build for Android.
          --android-ndk ${{ steps.setup-ndk.outputs.ndk-path }} \  # Path to an Android NDK.
          --android-arch aarch64 \  # Optionally specify Android architecture
          --android-api-level 21 \  # Android API level >= 21
          --stdlib-deployment-targets=android-aarch64 \  # Only cross-compile stdlib
          --native-swift-tools-path=$SWIFT_PATH \  # Path to prebuilt Swift compiler
          --native-clang-tools-path=$SWIFT_PATH \  # Path to prebuilt clang
          --build-swift-tools=0 \  # Don't build Swift host tools
          --build-llvm=0 \  # Don't build LLVM
          --skip-build-cmark  # Don't build CommonMark
  build-linux:
    runs-on: ubuntu-latest
    container: swift:latest
    steps:
      - uses: actions/checkout@v4
      - run: swiftc -swift-version 6 -O hello.swift -o hello
      - run: ./hello
  build-macos:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
      - run: sudo xcode-select --switch /Applications/Xcode_16.4.app
      - run: swiftc -swift-version 6 -O hello.swift -o hello
      - run: ./hello
